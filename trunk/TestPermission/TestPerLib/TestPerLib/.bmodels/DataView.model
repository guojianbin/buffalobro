<#script type="linked">

</#script>

<#script type="using">

</#script>

<#script type="code">
using System;
using System.Collections.Generic;
using System.Text;
using Buffalo.Permissions.DataViewInfo;
using Buffalo.DB.BQLCommon.BQLConditionCommon;
<#=Entity.GetValue("Using")#>
namespace <#=Entity.GetValue("Namespace")#>.DataView
{
	public class <#=Entity.ClassName #>DataView:DataViewer
	{
		<# foreach(Property pro in SelectedPropertys ) {#>
		private DataItem _<#=GetFieldName(pro.PropertyName)#>=null;
		private DataItem <#=pro.PropertyName#>
		{
			get
			{
				return _<#=GetFieldName(pro.PropertyName)#>;
			}
			set
			{
				_<#=GetFieldName(pro.PropertyName)#>=value;
			}
		}
		<#}#>
		
		/// <summary>
        /// <#= Entity.Summary #>
        /// </summary>
        /// <param name="entityHandle"></param>
		public <#=Entity.ClassName #>DataView(BQLEntityTableHandle entityHandle)
		:base(entityHandle,<#=GetClassString()#>)
		{
			<# foreach(Property pro in SelectedPropertys ) {#>
			_<#=GetFieldName(pro.PropertyName)#>=CreateDataItem(<#=GetParamString(pro)#>);
			<#}#>
		}
		
	}
}
</#script>

<#script type="method">
/// <summary>
/// »ñÈ¡×Ö¶ÎÃû
/// </summary>
/// <param name="itemName"></param>
/// <returns></returns>
public string GetFieldName(string name)
{
	string retName=name.Substring(0, 1).ToLower()+name.Substring(1, name.Length - 1);
	return retName;
	
}

/// <summary>
/// 
/// </summary>
/// <param name="pro"></param>
/// <returns></returns>
public string GetClassString()
{
	StringBuilder sb=new StringBuilder();
	sb.Append(Entity.HasItem("CanQuery")?"true":"false");
	sb.Append(",");
	sb.Append(Entity.HasItem("CanAddNew")?"true":"false");
	sb.Append(",");
	sb.Append(Entity.HasItem("CanEdit")?"true":"false");
	return sb.ToString();
}

/// <summary>
/// 
/// </summary>
/// <param name="pro"></param>
/// <returns></returns>
public string GetParamString(Property pro)
{
	StringBuilder sb=new StringBuilder();
	sb.Append("\""+pro.PropertyName+"\"");
	sb.Append(",");
	sb.Append("typeof("+pro.PropertyType+")");
	sb.Append(",");
	sb.Append(pro.HasItem("CanQuery")?"true":"false");
	sb.Append(",");
	sb.Append(pro.HasItem("CanAddNew")?"true":"false");
	sb.Append(",");
	sb.Append(pro.HasItem("CanEdit")?"true":"false");
	sb.Append(",");
	string sumType=pro.GetValue("SumType");
	sb.Append(string.IsNullOrEmpty(sumType)?"SumType.None":"SumType."+sumType);
	sb.Append(",");
	string customer=pro.GetValue("CustomCount");
	sb.Append(string.IsNullOrEmpty(customer)?"null":customer);
	return sb.ToString();
}
</#script>