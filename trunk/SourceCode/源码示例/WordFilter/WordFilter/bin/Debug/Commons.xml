<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Commons</name>
    </assembly>
    <members>
        <member name="M:Commons.Replacer.MyReplacer.Replace(System.String,System.Collections.Generic.IEnumerable{Commons.Replacer.ReplaceItem})">
            <summary>
            替换集合的字符
            </summary>
            <param name="itemCollection">要替换的集合</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Replacer.MyReplacer.DoReplace(System.String,System.Collections.Generic.IEnumerable{Commons.Replacer.ReplaceItem},System.Int32@)">
            <summary>
            判断是否有替换的关键字
            </summary>
            <param name="source">源字符串</param>
            <param name="itemCollection"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.Replacer.MyReplacer.StringEquals(System.String,System.Int32,System.String)">
            <summary>
            判断源字符串从指定位置开始是否有匹配的keyword
            </summary>
            <param name="source">源字符串</param>
            <param name="index">指定位置</param>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="T:Commons.RealizeIChit">
            <summary>
            realizeIChit 的摘要说明。
            </summary>
        </member>
        <member name="M:Commons.RealizeIChit.Login">
            <summary>
            登陆
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">服务器端口</param>
            <param name="username">登陆帐户名</param>
            <param name="pwd">登陆密码</param>
            <returns>登陆成功返回正整数(socket句柄)</returns>
        </member>
        <member name="M:Commons.RealizeIChit.TextConn">
            <summary>
            测试连接
            </summary>
            <returns>测试连接成功返回1,与服务器交互超时返回-1,-2。该sock无效返回-3 </returns>
        </member>
        <member name="M:Commons.RealizeIChit.SendSms(System.String,System.String)">
            <summary>
            发送单向信息
            </summary>
            <param name="mobi">接收方手机号</param>
            <param name="note">信息内容</param>
            <returns> 1: 发送信息成功提交到平台.-1: 输入参数中，包含有空值.-3,-4: 与服务器交互超时</returns>
        </member>
        <member name="M:Commons.RealizeIChit.QueryBalance">
            <summary>
            查询余额
            </summary>
            <returns>  >=0: 为余额.-1,-2: 与服务器交互超时</returns>
        </member>
        <member name="M:Commons.RealizeIChit.QueryUsed">
            <summary>
            查询已经使用条数
            </summary>
            <returns>   >=0: 为已经使用条数.-1,-2: 与服务器交互超时</returns>
        </member>
        <member name="M:Commons.RealizeIChit.Recharge(System.String,System.String)">
            <summary>
            帐户充值
            </summary>
            <param name="cardno">充值卡卡号</param>
            <param name="cardpwd">充值卡密码</param>
            <returns></returns>
        </member>
        <member name="M:Commons.RealizeIChit.ChangePwd(System.String,System.String,System.String)">
            <summary>
            修改密码
            </summary>
            <param name="account">账户</param>
            <param name="oldpwd">旧密码</param>
            <param name="newpwd">新密码</param>
            <returns>1: 成功.-1: const char*, char* 这样的参数中，包含有NULL值 -2: 密码长度非法.-3,-4: 与服务器交互超时</returns>
        </member>
        <member name="M:Commons.RealizeIChit.Disconnect">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:Commons.RealizeIChit.VasGetSms(System.Byte@)">
            <summary>
            接收增值服务
            </summary>
            <param name="recvbuf">接收到的信息(字符串数组)</param>
            <returns> >0: 收到的信息条数-1: 参数2没有分配足够的缓冲区-2,-3: 与服务器交互超时-10: 连接句柄失效，请重新连接</returns>
        </member>
        <member name="M:Commons.RealizeIChit.CsGetSms(System.Byte@)">
            <summary>
            读取客服信息
            </summary>
            <param name="recvbuf">接收到的信息(字符串数组)</param>
            <returns> >=0: 收到的信息条数-1: 参数2没有分配足够的缓冲区-2,-3: 与服务器交互超时-10: 连接句柄失效，请重新连接</returns>
        </member>
        <member name="M:Commons.RealizeIChit.CsSendSms(System.String,System.String,System.Int32,System.Text.StringBuilder)">
            <summary>
            发送双向信息
            </summary>
            <param name="mobi">接收手机</param>
            <param name="note">信息内容</param>
            <param name="icount">接收手机的个数</param>
            <param name="msgno">信息编号</param>
            <returns>   1: 成功-1: 输入的参数中，包含有NULL值-3,-4: 与服务器交互超时 -10: 分配堆空间失败</returns>
        </member>
        <member name="M:Commons.RealizeIChit.CsGetStatusReport(System.Byte@)">
            <summary>
            读取状态报告
            </summary>
            <param name="recvbuf">接收到的状态报告(字符串数组)</param>
            <returns>返回值:>=0: 收到的状态报告条数-1: 参数2没有分配足够的缓冲区-2,-3: 与服务器交互超时</returns>
        </member>
        <member name="T:Commons.ExcelFormat">
            <summary>
            Excel格式
            </summary>
        </member>
        <member name="F:Commons.ExcelFormat.Excel2003">
            <summary>
            Excel2003的格式(xls)
            </summary>
        </member>
        <member name="F:Commons.ExcelFormat.Excel2010">
            <summary>
            Excel2007、Excel2010格式(xlsx)
            </summary>
        </member>
        <member name="M:Commons.ExcelUnit.GetConnectString(System.String,Commons.ExcelFormat)">
            <summary>
            获取连接字符串
            </summary>
            <param name="path"></param>
            <param name="fromat"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExcelUnit.LoadXLS(System.String)">
            <summary>
            读取Excel到DataSet
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExcelUnit.LoadXLS(System.String,Commons.ExcelFormat)">
            <summary>
            读取Excel到DataSet
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExcelUnit.ToExcel(System.Data.DataSet,System.String)">
            <summary>
            把DataTable保存到Excel文件
            </summary>
            <param name="dt">数据源</param>
            <param name="excelPath">Excel文件位置</param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExcelUnit.ToExcel(System.Data.DataSet,System.String,Commons.ExcelFormat)">
            <summary>
            把DataTable保存到Excel文件
            </summary>
            <param name="dt">数据源</param>
            <param name="excelPath">Excel文件位置</param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExcelUnit.ReadCSVFromDT(System.String)">
            <summary>
            读取CSV
            </summary>
            <param name="stm"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExcelUnit.ReadCSVFromDT(System.String,System.Text.Encoding)">
            <summary>
            读取CSV
            </summary>
            <param name="stm"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExcelUnit.ReadCSVFromDT(System.IO.Stream,System.Text.Encoding)">
            <summary>
            读取CSV
            </summary>
            <param name="stm"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExcelUnit.WriteCSVToDT(System.String,System.Data.DataTable)">
            <summary>
            把DataTable导出成CSV文件
            </summary>
            <param name="stm"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Commons.ExcelUnit.WriteCSVToDT(System.String,System.Data.DataTable,System.Text.Encoding)">
            <summary>
            把DataTable导出成CSV文件
            </summary>
            <param name="stm"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Commons.ExcelUnit.WriteCSVToDT(System.IO.Stream,System.Data.DataTable,System.Text.Encoding)">
            <summary>
            把DataTable导出成CSV文件
            </summary>
            <param name="stm"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Commons.ExcelUnit.ReadCSV(System.String)">
            <summary>
            读取CSV
            </summary>
            <param name="stm">文件流</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExcelUnit.WriteCSV(System.String,System.Collections.Generic.List{System.String[]})">
            <summary>
            写入CSV
            </summary>
            <param name="path">文件路径</param>
            <param name="ls">数据</param>
        </member>
        <member name="M:Commons.ExcelUnit.WriteCSV(System.IO.Stream,System.Collections.Generic.List{System.String[]},System.Text.Encoding)">
            <summary>
            写入CSV
            </summary>
            <param name="stm">文件流</param>
            <param name="ls">数据</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Commons.ExcelUnit.ReadCSV(System.IO.Stream,System.Text.Encoding)">
            <summary>
            读取CSV
            </summary>
            <param name="stm">文件流</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Commons.NetClients.NetConnection.SendTo(System.Byte[])">
            <summary>
            发送信息到指定位置
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.NetClients.NetConnection.SendTo(System.String)">
            <summary>
            发送信息到指定位置
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.NetClients.NetConnection.Receive">
            <summary>
            发送信息到指定位置
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.NetClients.NetConnection.GetData(System.Net.Sockets.Socket)">
            <summary>
            获取流的数据
            </summary>
            <param name="stm"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.NetClients.NetConnection.GetSocketMsg(System.Net.Sockets.Socket)">
            <summary>
            获取 Socket 流消息。
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.NetClients.NetConnection.GetSocketData(System.Net.Sockets.Socket)">
            <summary>
            获取流的数据
            </summary>
            <param name="stm"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.NetClients.NetConnection.CloseConnection">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="P:Commons.NetClients.NetConnection.EndPoint">
            <summary>
            IP状态
            </summary>
        </member>
        <member name="M:Commons.Replacer.DicReplace.Replace(System.String,Commons.Replacer.ReplaceItemCollection)">
            <summary>
            替换集合的字符
            </summary>
            <param name="itemCollection">要替换的集合</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Replacer.DicReplace.GetString(System.String,System.Int32@,Commons.Replacer.ReplaceItemCollection)">
            <summary>
            判断源字符串从指定位置开始是否有匹配的keyword
            </summary>
            <param name="source">源字符串</param>
            <param name="index">指定位置</param>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Commons.PropertyType.GetForLen(System.Byte[])">
            <summary>
            获取循环的长度
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.Commons.PropertyType.DoAnd(System.Byte[])">
            <summary>
            进行and运算
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DoOr(System.Byte[])">
            <summary>
            进行Or运算
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DoXor(System.Byte[])">
            <summary>
            进行Or运算
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.AddProperty(System.Byte[])">
            <summary>
            添加一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.AddProperty(System.UInt32)">
            <summary>
            添加一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.AddProperty(System.Int32)">
            <summary>
            添加一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.AddProperty(System.Double)">
            <summary>
            添加一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.AddProperty(System.Single)">
            <summary>
            添加一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.AddProperty(System.Int64)">
            <summary>
            添加一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.AddProperty(System.Int16)">
            <summary>
            添加一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.AddProperty(System.UInt64)">
            <summary>
            添加一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.AddProperty(System.UInt16)">
            <summary>
            添加一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.AddProperty(System.Char)">
            <summary>
            添加一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.AddProperty(System.Enum)">
            <summary>
            添加一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DeleteProperty(System.Byte[])">
            <summary>
            删除一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DeleteProperty(System.Int32)">
            <summary>
            删除一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DeleteProperty(System.UInt32)">
            <summary>
            删除一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DeleteProperty(System.Char)">
            <summary>
            删除一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DeleteProperty(System.Double)">
            <summary>
            删除一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DeleteProperty(System.Single)">
            <summary>
            删除一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DeleteProperty(System.Int64)">
            <summary>
            删除一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DeleteProperty(System.Int16)">
            <summary>
            删除一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DeleteProperty(System.UInt64)">
            <summary>
            删除一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DeleteProperty(System.UInt16)">
            <summary>
            删除一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.DeleteProperty(System.Enum)">
            <summary>
            删除一个属性
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.Contains(System.Byte[])">
            <summary>
            返回一个布尔型，指示是否含有指定值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.Contains(System.Double)">
            <summary>
            返回一个布尔型，指示是否含有指定值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.Contains(System.Char)">
            <summary>
            返回一个布尔型，指示是否含有指定值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.Contains(System.Single)">
            <summary>
            返回一个布尔型，指示是否含有指定值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.Contains(System.Int32)">
            <summary>
            返回一个布尔型，指示是否含有指定值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.Contains(System.Int64)">
            <summary>
            返回一个布尔型，指示是否含有指定值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.Contains(System.Int16)">
            <summary>
            返回一个布尔型，指示是否含有指定值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.Contains(System.UInt32)">
            <summary>
            返回一个布尔型，指示是否含有指定值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.Contains(System.UInt64)">
            <summary>
            返回一个布尔型，指示是否含有指定值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.Contains(System.UInt16)">
            <summary>
            返回一个布尔型，指示是否含有指定值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Commons.Commons.PropertyType.Contains(System.Enum)">
            <summary>
            返回一个布尔型，指示是否含有指定值
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Commons.Commons.PropertyType.IntValue">
            <summary>
            整型值
            </summary>
        </member>
        <member name="P:Commons.Commons.PropertyType.CharValue">
            <summary>
            字符型
            </summary>
        </member>
        <member name="P:Commons.Commons.PropertyType.DoubleValue">
            <summary>
            双精度型
            </summary>
        </member>
        <member name="P:Commons.Commons.PropertyType.ShortValue">
            <summary>
            短整型
            </summary>
        </member>
        <member name="P:Commons.Commons.PropertyType.LongValue">
            <summary>
            长整型
            </summary>
        </member>
        <member name="P:Commons.Commons.PropertyType.FloatValue">
            <summary>
            浮点型
            </summary>
        </member>
        <member name="P:Commons.Commons.PropertyType.ULongValue">
            <summary>
            无符号长整型
            </summary>
        </member>
        <member name="P:Commons.Commons.PropertyType.UIntValue">
            <summary>
            无符号整型值
            </summary>
        </member>
        <member name="P:Commons.Commons.PropertyType.UShortValue">
            <summary>
            无符号短整型
            </summary>
        </member>
        <member name="M:Commons.ExpressFunctions.GetHandle(System.String)">
            <summary>
            根据函数名获取函数
            </summary>
            <param name="fName"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExpressFunctions.DoSqrt(System.Double[])">
            <summary>
            开根号
            </summary>
            <param name="nums"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExpressFunctions.DoPow(System.Double[])">
            <summary>
            次幂
            </summary>
            <param name="nums"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExpressionsEval.Eval(System.String)">
            <summary>
            计算带变量的表达式
            </summary>
            <param name="expressions">表达式</param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExpressionsEval.Eval">
            <summary>
            计算表达式的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Commons.ExpressionsEval.GetNumber(System.Text.StringBuilder)">
            <summary>
            从字符串缓冲中获取值
            </summary>
            <param name="tmpNumber">字符串缓冲</param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExpressionsEval.Calculation(System.Collections.Generic.LinkedList{System.Double},System.Collections.Generic.LinkedList{System.Char})">
            <summary>
            计算表达式
            </summary>
            <param name="stkNumber">数字栈</param>
            <param name="stkSymbol">符号栈</param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExpressionsEval.IsNumber(System.Char)">
            <summary>
            判断是否数字
            </summary>
            <param name="chr">字符</param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExpressionsEval.IsOperators(System.Char)">
            <summary>
            判断是否运算符
            </summary>
            <param name="chr">字符</param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExpressionsEval.IsNumber(System.String)">
            <summary>
            判断是否数字
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Commons.ExpressionsEval.Result(System.Double,System.Double,System.Char)">
            <summary>
            计算表达式的结果
            </summary>
            <param name="number1">数字1</param>
            <param name="number2">数字2</param>
            <param name="symbol">运算符</param>
            <returns></returns>
        </member>
        <member name="P:Commons.ExpressionsEval.Params">
            <summary>
            变量集合
            </summary>
        </member>
        <member name="M:Commons.ZipFile.SharpZipFile.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            压缩文件
            </summary>
            <param name="baseStream">基础流</param>
            <param name="ziplevel">压缩等级</param>
        </member>
        <member name="M:Commons.ZipFile.SharpZipFile.GetDirectoryName(System.String)">
            <summary>
            获取文件夹名
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.ZipFile.SharpZipFile.GetFileName(System.String)">
            <summary>
            获取文件名
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.ZipFile.SharpZipFile.AddZipEntry(System.String,System.Byte[])">
            <summary>
            添加压缩项目
            </summary>
            <param name="fileName">文件名</param>
            <param name="content">内容m</param>
        </member>
        <member name="M:Commons.ZipFile.SharpZipFile.AddZipEntry(System.String,System.IO.Stream)">
            <summary>
            添加压缩项目
            </summary>
            <param name="fileName">文件名</param>
            <param name="stm">内容</param>
        </member>
        <member name="M:Commons.ZipFile.SharpZipFile.AddZipEntry(System.String,System.String)">
            <summary>
            添加压缩项目
            </summary>
            <param name="fileName">文件名</param>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Commons.ZipFile.SharpUnZipFile.UnZipFiles(System.String)">
            <summary>
            解压缩
            </summary>
            <param name="p">需解压缩的文件或文件夹</param>
            <param name="ServerDir">父级文件夹绝对路径</param>
        </member>
        <member name="M:Commons.ZipFile.SharpUnZipFile.UnZip(System.IO.Stream)">
            <summary>
            解压到流
            </summary>
            <param name="stm"></param>
        </member>
        <member name="F:Commons.CommonRegular.PhoneNumber">
            <summary>
            固定电话号码
            </summary>
        </member>
        <member name="F:Commons.CommonRegular.MobilePhone">
            <summary>
            移动电话
            </summary>
        </member>
        <member name="F:Commons.CommonRegular.AllPhone">
            <summary>
            所有电话号码
            </summary>
        </member>
        <member name="F:Commons.CommonRegular.ValidateAccount">
            <summary>
            匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)
            </summary>
        </member>
        <member name="F:Commons.CommonRegular.ValidateQQ">
            <summary>
            匹配腾讯QQ号
            </summary>
        </member>
        <member name="F:Commons.CommonRegular.Fax">
            <summary>
            传真号码
            </summary>
        </member>
        <member name="F:Commons.CommonRegular.MailCode">
            <summary>
            邮政编码
            </summary>
        </member>
        <member name="F:Commons.CommonRegular.OnlyChinese">
            <summary>
            只能有中文
            </summary>
        </member>
        <member name="T:Commons.BopomofoConvert">
            <summary>
            汉语转拼音
            </summary>
        </member>
        <member name="M:Commons.BopomofoConvert.Convert(System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            </summary>
            <param name="hzString">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="T:Commons.SysEventLog">
            <summary>
            系统事件
            </summary>
        </member>
        <member name="M:Commons.SysEventLog.#ctor(System.String,System.String)">
            <summary>
            系统日志
            </summary>
            <param name="sourceName">源名称</param>
            <param name="logName">日志名</param>
        </member>
        <member name="M:Commons.SysEventLog.WriteLog(System.String)">
            <summary>
            写入日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Commons.Commons.BitUnit.AddProperty(System.UInt32,System.UInt32)">
            <summary>
            在属性集合添加一个属性
            </summary>
            <param name="propertys">属性集合</param>
            <param name="value">要添加的属性值</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Commons.BitUnit.DeleteProperty(System.UInt32,System.UInt32)">
            <summary>
            在属性集合删除一个属性
            </summary>
            <param name="propertys">属性集合</param>
            <param name="value">要删除的属性值</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Commons.BitUnit.HasProperty(System.UInt32,System.UInt32)">
            <summary>
            判断集合里边是否含有该属性
            </summary>
            <param name="propertys">属性集合</param>
            <param name="value">要判断的属性值</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Picture.PrintScreen(System.Drawing.Rectangle)">
            <summary>
            截取屏幕
            </summary>
            <param name="rect">开始截取位置</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Picture.WhileImagesByScope(System.IO.Stream,System.String,System.Int32,System.Int32)">
            <summary>
            把图片写入服务器图片按指定尺寸保存
            </summary>
            <param name="stmImg">文件流</param>
            <param name="root">保存的路径</param>
            <param name="maxWidth">最大宽度</param>
            <param name="maxHeight">最大高度</param>
        </member>
        <member name="M:Commons.Picture.ScopeSize(System.Int32,System.Int32,System.Drawing.Size)">
            <summary>
            规范尺寸
            </summary>
            <param name="maxWidth">最大宽度</param>
            <param name="maxHeight">最大高度</param>
            <param name="size">待规范的尺寸</param>
        </member>
        <member name="M:Commons.Picture.PictureToBytesInScope(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            把图片流转成字节(大小不能超过指定值)
            </summary>
            <param name="fileStm">图片流</param>
            <param name="maxWidth">最大宽度</param>
            <param name="maxHeight">最大高度</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Picture.PictureToBytes(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            把图片流转成字节
            </summary>
            <param name="fileStm">图片流</param>
            <param name="width">转换后的宽度</param>
            <param name="height">转换后的高度</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Picture.PictureToBytes(System.Drawing.Image)">
            <summary>
            把图片转换成字节
            </summary>
            <param name="img">图片</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Picture.BytesToPicture(System.Byte[])">
            <summary>
            把字节转换为图片
            </summary>
            <param name="byteImage">图片字节</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Picture.ReSizePicturee(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            变换图片大小
            </summary>
            <param name="img">源图片</param>
            <param name="width">变换后的宽</param>
            <param name="height">变换后的高</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Picture.ReadFile(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="root">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Picture.WhileImages(System.IO.Stream,System.String,System.Drawing.Size)">
            <summary>
            把图片写入服务器
            </summary>
            <param name="stmImg">文件流</param>
            <param name="root">保存的路径</param>
            <param name="picSize">图片尺寸</param>
        </member>
        <member name="M:Commons.Picture.ChangeSize(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            改变图片尺寸
            </summary>
            <param name="originalImage">源图片</param>
            <param name="picSize">尺寸</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Picture.WhileImages(System.IO.Stream,System.String)">
            <summary>
            把图片写入服务器
            </summary>
            <param name="stmImg">文件流</param>
            <param name="root">保存的路径</param>
        </member>
        <member name="M:Commons.Picture.GetEncoderInfo(System.String)">
            <summary>
            获取编码信息
            </summary>
            <param name="mimeType">类型</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Picture.SaveImage(System.IO.Stream,System.String)">
            <summary>
            原样保存图片，不做任何格式修改
            </summary>
            <param name="stmImg">图片流</param>
            <param name="root">保存路径</param>
        </member>
        <member name="T:Commons.DllInvoke">
            <summary>
            DllInvoke 的摘要说明
            </summary>
        </member>
        <member name="P:Commons.Defaults.TypeItem.ItemType">
            <summary>
            数值类型
            </summary>
        </member>
        <member name="P:Commons.Defaults.TypeItem.DefaultValue">
            <summary>
            数据的默认值
            </summary>
        </member>
        <member name="M:Commons.CSVReader.ReaderRow">
            <summary>
            读取行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Commons.CSVReader.ReadValue">
            <summary>
            读取值
            </summary>
            <returns></returns>
        </member>
        <member name="P:Commons.CSVReader.IsEnd">
            <summary>
            是否已经读完
            </summary>
        </member>
        <member name="M:Commons.Replacer.ReplaceCollection.Add(System.String,System.String)">
            <summary>
            添加一个新的替换项
            </summary>
            <param name="oldString">旧字符串</param>
            <param name="newString">新字符串</param>
        </member>
        <member name="P:Commons.Replacer.ReplaceItem.OldString">
            <summary>
            旧字符串
            </summary>
        </member>
        <member name="P:Commons.Replacer.ReplaceItem.NewString">
            <summary>
            新字符串字符串
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultIntValue">
            <summary>
            整型默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultBooleanValue">
            <summary>
            布尔型默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultDoubleValue">
            <summary>
            双精度默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultFloatValue">
            <summary>
            浮点型默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultDateTimeValue">
            <summary>
            时间默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultDecimalValue">
            <summary>
            Decimal默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultByteValue">
            <summary>
            字节默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultSbyteValue">
            <summary>
            小字节默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultShortValue">
            <summary>
            短整型默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultLongValue">
            <summary>
            长整型默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultUintValue">
            <summary>
            无符号整型默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultUshortValue">
            <summary>
            无符号短整型默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultUlongValue">
            <summary>
            无符号长整型默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultGuidValue">
            <summary>
            Guid类型
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultInt">
            <summary>
            整型默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultDouble">
            <summary>
            双精度默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultFloat">
            <summary>
            浮点型默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultDecimal">
            <summary>
            Decimal默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultSbyte">
            <summary>
            小字节默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultShort">
            <summary>
            短整型默认值
            </summary>
        </member>
        <member name="F:Commons.Defaults.DefaultValue.DefaultLong">
            <summary>
            长整型默认值
            </summary>
        </member>
        <member name="M:Commons.Defaults.DefaultValue.ValueToString(System.Object,System.String)">
            <summary>
            把值按照指定格式转换成字符串
            </summary>
            <param name="value">值</param>
            <param name="formatString">格式字符串</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Defaults.DefaultValue.Compare(System.Object,System.Object)">
            <summary>
            对两个object值进行比较(-1为val1&lt;val2,0为val1=val2,1为val1&gt;val2)
            </summary>
            <param name="val1">值1</param>
            <param name="val2">值2</param>
            <returns>-1为val1&lt;val2,0为val1=val2,1为val1&gt;val2</returns>
        </member>
        <member name="T:Commons.PostForms.FormPost">
            <summary>
            模拟向表单发送数据
            </summary>
        </member>
        <member name="M:Commons.PostForms.FormPost.PostData(System.String,System.Collections.Generic.Dictionary{System.String,System.String},Commons.PostForms.FormFile[])">
            <summary>
            发送数据
            </summary>
            <param name="actionUrl">发送的链接</param>
            <param name="prms">发送数据的字段和值</param>
            <param name="files">要发送的文件</param>
            <returns></returns>
        </member>
        <member name="M:Commons.PostForms.FormPost.PostData(System.Net.HttpWebRequest,System.Collections.Generic.Dictionary{System.String,System.String},Commons.PostForms.FormFile[])">
            <summary>
            发送数据
            </summary>
            <param name="request">发送请求</param>
            <param name="prms">发送数据的字段和值</param>
            <param name="files">要发送的文件</param>
            <returns></returns>
        </member>
        <member name="M:Commons.PostForms.FormPost.WriteData(System.IO.Stream,System.Byte[])">
            <summary>
            写入数据
            </summary>
            <param name="stm"></param>
            <param name="data"></param>
        </member>
        <member name="M:Commons.PostForms.FormPost.WriteString(System.IO.Stream,System.String)">
            <summary>
            写入字符串
            </summary>
            <param name="stm"></param>
            <param name="data"></param>
        </member>
        <member name="T:Commons.FastReflection.ClassInfos.ClassPropertyEnumerator">
            <summary>
            属性的枚举类
            </summary>
        </member>
        <member name="T:Commons.MassBase`1">
            <summary>
            常量类的基类
            </summary>
        </member>
        <member name="M:Commons.MassBase`1.GetInfos">
            <summary>
            获取本常量类里边所有属性的信息
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Commons.MassBase`1.GetDescription(System.Object)">
            <summary>
            获取常量值值的注释
            </summary>
            <param name="objEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.MassBase`1.GetInfo(System.Object)">
            <summary>
            获取常量值对应的信息
            </summary>
            <param name="value">常量值</param>
            <returns></returns>
        </member>
        <member name="M:Commons.MassBase`1.GetInfoByName(System.String)">
            <summary>
            根据常量类的字段名来获取其信息
            </summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="T:Commons.FastReflection.SetFieldValueHandle">
            <summary>
            快速设置字段值的委托
            </summary>
            <param name="obj">对象</param>
            <param name="value">值</param>
        </member>
        <member name="T:Commons.FastReflection.GetFieldValueHandle">
            <summary>
            快速获取字段值的委托
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FastFieldGetSet.GetGetValueHandle(System.Reflection.FieldInfo)">
            <summary>
            获取字段获取值的委托
            </summary>
            <param name="info">字段信息</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FastFieldGetSet.GetGetValueHandle(System.Type,System.String)">
            <summary>
            获取字段获取值的委托
            </summary>
            <param name="objType">对象类型</param>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FastFieldGetSet.GetSetValueHandle(System.Reflection.FieldInfo)">
            <summary>
            获取字段设置值的委托
            </summary>
            <param name="info">字段信息</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FastFieldGetSet.GetSetValueHandle(System.Type,System.String)">
            <summary>
            获取字段设置值的委托
            </summary>
            <param name="objType">对象类型</param>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ProxyObject.#ctor(System.String,System.String,System.Object[])">
            <summary>
            加载类型
            </summary>
            <param name="filePath">文件名</param>
            <param name="TypeName">类名</param>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ProxyObject.#ctor(System.Byte[],System.String,System.String,System.Object[])">
            <summary>
            加载类型
            </summary>
            <param name="dllContent">文件内容</param>
            <param name="TypeName">类名</param>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ProxyObject.#ctor(System.Byte[],System.String,System.Object[])">
            <summary>
            加载类型
            </summary>
            <param name="dllContent">文件内容</param>
            <param name="TypeName">类名</param>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ProxyObject.#ctor(System.Reflection.Assembly,System.String,System.Object[])">
            <summary>
            加载类型
            </summary>
            <param name="assembly">程序集</param>
            <param name="TypeName">类名</param>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ProxyObject.#ctor(System.Type,System.Object[])">
            <summary>
            加载类型
            </summary>
            <param name="tp">类型</param>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ProxyObject.Init(System.Type,System.Object[])">
            <summary>
            初始化
            </summary>
            <param name="assembly">程序集</param>
            <param name="TypeName">类型名</param>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ProxyObject.Invoke(System.String,System.Object[])">
            <summary>
            运行该函数
            </summary>
            <param name="methodName">函数名</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ProxyObject.GetParamTypes(System.Object[])">
            <summary>
            获取参数的类型
            </summary>
            <param name="args">参数类型</param>
            <returns></returns>
        </member>
        <member name="P:Commons.FastReflection.ClassInfos.ProxyObject.Item(System.String)">
            <summary>
            设置或获取属性
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="P:Commons.FastReflection.ClassInfos.ProxyObject.ClassHandle">
            <summary>
            类型信息
            </summary>
        </member>
        <member name="T:Commons.Media.AVIWriter">
            <summary>
            AVIWriter 的摘要说明，chenpeng,Email:ceponline@yahoo.com.cn。
            </summary>
        </member>
        <member name="M:Commons.Media.AVIWriter.CreateStream">
            <summary>
            创建流文件
            </summary>
        </member>
        <member name="M:Commons.Media.AVIWriter.SetOptions">
            <summary>
            设置参数
            </summary>
        </member>
        <member name="P:Commons.Media.AVIWriter.CompressedOptionData">
            <summary>
            压缩选项数据
            </summary>
        </member>
        <member name="T:Commons.FastReflection.PropertyInfoHandle">
            <summary>
            创建属性的信息类
            </summary>
        </member>
        <member name="M:Commons.FastReflection.PropertyInfoHandle.#ctor(Commons.FastReflection.FastInvoke.FastInvokeHandler,Commons.FastReflection.FastInvoke.FastInvokeHandler,System.Type,System.String)">
            <summary>
            创建属性的信息类
            </summary>
            <param name="getHandle">get委托</param>
            <param name="setHandle">set委托</param>
            <param name="propertyType">属性数据类型</param>
        </member>
        <member name="M:Commons.FastReflection.PropertyInfoHandle.SetValue(System.Object,System.Object)">
            <summary>
            给对象设置值
            </summary>
            <param name="args">对象</param>
            <param name="value">值</param>
        </member>
        <member name="M:Commons.FastReflection.PropertyInfoHandle.GetValue(System.Object)">
            <summary>
            获取对象值
            </summary>
            <param name="args">对象</param>
        </member>
        <member name="P:Commons.FastReflection.PropertyInfoHandle.PropertyType">
            <summary>
            获取属性的类型
            </summary>
        </member>
        <member name="P:Commons.FastReflection.PropertyInfoHandle.PropertyName">
            <summary>
            获取属性的名字
            </summary>
        </member>
        <member name="P:Commons.FastReflection.PropertyInfoHandle.HasGetHandle">
            <summary>
            是否有Get方法
            </summary>
        </member>
        <member name="P:Commons.FastReflection.PropertyInfoHandle.HasSetHandle">
            <summary>
            是否有Set方法
            </summary>
        </member>
        <member name="T:Commons.FastReflection.ClassInfos.ClassInfoManager">
            <summary>
            实体属性管理
            </summary>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ClassInfoManager.GetClassHandle(System.Type)">
            <summary>
            获取实体类里边得属性信息
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ClassInfoManager.InitClassPropertyInfos(System.Type)">
            <summary>
            初始化类型的属性信息
            </summary>
            <param name="type">类型</param>
            <returns>如果已经初始化过侧返回false</returns>
        </member>
        <member name="P:Commons.Replacer.ReplaceItemCollection.MinLength">
            <summary>
            集合中字符串最小的长度
            </summary>
        </member>
        <member name="P:Commons.Replacer.ReplaceItemCollection.MaxLength">
            <summary>
            集合中字符串最大的长度
            </summary>
        </member>
        <member name="M:Commons.PasswordHash.ToMD5String(System.String)">
            <summary>
            对字符串进行MD5加密
            </summary>
            <param name="str">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Commons.PasswordHash.ToMD5String(System.Byte[])">
            <summary>
            对字符串进行MD5加密
            </summary>
            <param name="str">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Commons.PasswordHash.ToSHA1String(System.String)">
            <summary>
            对字符串进行MD5加密
            </summary>
            <param name="str">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Commons.PasswordHash.ToSHA1String(System.Byte[])">
            <summary>
            对字符串进行MD5加密
            </summary>
            <param name="str">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FieldInfoHandle.#ctor(System.Type,Commons.FastReflection.GetFieldValueHandle,Commons.FastReflection.SetFieldValueHandle,System.Type,System.String)">
            <summary>
            创建属性的信息类
            </summary>
            <param name="belong">字段所属的类类型</param>
            <param name="getHandle">get委托</param>
            <param name="setHandle">set委托</param>
            <param name="fieldType">字段数据类型</param>
            <param name="fieldName">字段名</param>
        </member>
        <member name="M:Commons.FastReflection.FieldInfoHandle.SetValue(System.Object,System.Object)">
            <summary>
            给对象设置值
            </summary>
            <param name="args">对象</param>
            <param name="value">值</param>
        </member>
        <member name="M:Commons.FastReflection.FieldInfoHandle.GetValue(System.Object)">
            <summary>
            给对象设置值
            </summary>
            <param name="args">对象</param>
            <param name="value">值</param>
        </member>
        <member name="P:Commons.FastReflection.FieldInfoHandle.Belong">
            <summary>
            字段所属的类
            </summary>
        </member>
        <member name="P:Commons.FastReflection.FieldInfoHandle.FieldType">
            <summary>
            获取属性的类型
            </summary>
        </member>
        <member name="P:Commons.FastReflection.FieldInfoHandle.FieldName">
            <summary>
            获取属性的名字
            </summary>
        </member>
        <member name="P:Commons.FastReflection.FieldInfoHandle.HasGetHandle">
            <summary>
            是否有Get方法
            </summary>
        </member>
        <member name="P:Commons.FastReflection.FieldInfoHandle.HasSetHandle">
            <summary>
            是否有Set方法
            </summary>
        </member>
        <member name="M:Commons.FastReflection.FastInvoke.GetInstanceCreator(System.Type)">
            <summary>
            生成实体类
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Commons.FastReflection.FastInvoke.CreateInstanceHandler">
            <summary>
            委托获取实体类对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Commons.MailSender.SendMail(System.String,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="mailTo">发送到</param>
            <param name="title">标题</param>
            <param name="contact">正文</param>
        </member>
        <member name="P:Commons.MailSender.MailSource">
            <summary>
            发送源邮箱
            </summary>
        </member>
        <member name="P:Commons.MailSender.MailUser">
            <summary>
            发送源邮箱登录名
            </summary>
        </member>
        <member name="P:Commons.MailSender.MailPass">
            <summary>
            发送源邮箱登录名
            </summary>
        </member>
        <member name="P:Commons.MailSender.MailSmtp">
            <summary>
            发送源邮箱登录名
            </summary>
        </member>
        <member name="M:Commons.TimeCodeCreater.NextOrderCode">
            <summary>
            生成下一个时间码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ClassPropertyInfoCollection.#ctor(System.Collections.Generic.Dictionary{System.String,Commons.FastReflection.PropertyInfoHandle})">
            <summary>
            属性信息集合
            </summary>
            <param name="propertyInfoHandles">属性信息的哈希表</param>
        </member>
        <member name="P:Commons.FastReflection.ClassInfos.ClassPropertyInfoCollection.Item(System.String)">
            <summary>
            根据属性名获取属性信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="P:Commons.FastReflection.ClassInfos.ClassPropertyInfoCollection.Count">
            <summary>
            当前属性的数量
            </summary>
        </member>
        <member name="M:Commons.Defaults.DefaultType.GetCSharpVariableType(System.Data.DbType)">
            <summary>
            获取C#类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.Defaults.DefaultType.IsDefaultValue(System.Object)">
            <summary>
            判断是否默认值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.Defaults.DefaultType.GetDefaultValue(System.Type)">
            <summary>
            获取该类型的默认值
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.Defaults.DefaultType.IsInherit(System.Type,System.Type)">
            <summary>
            判断是否该类型的子类
            </summary>
            <param name="type">当前类</param>
            <param name="baseType">基类</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Defaults.DefaultType.EqualType(System.Type,System.Type)">
            <summary>
            判断变量类型是否此类型
            </summary>
            <param name="value"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.Defaults.DefaultType.GetRealValueType(System.Type)">
            <summary>
            获取泛型类里边的类型
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.Defaults.DefaultType.GetGenericType(System.Type,System.Boolean)">
            <summary>
            获取泛型里边的类型
            </summary>
            <param name="type"></param>
            <param name="isherit"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.Defaults.DefaultType.IsImplement(System.Type,System.Type)">
            <summary>
            判断是否实现了该接口
            </summary>
            <param name="type">当前类</param>
            <param name="interfaceType">接口类型</param>
            <returns></returns>
        </member>
        <member name="M:Commons.Defaults.DefaultType.ToDbType(System.Type)">
            <summary>
            把C#类型转换成SQL类型
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="T:Commons.CommonMethods">
            <summary>
            常用的方法类
            </summary>
        </member>
        <member name="M:Commons.CommonMethods.GetBaseRoot(System.String)">
            <summary>
            获取基路径
            </summary>
            <param name="configRoot"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.IsNull(System.Object)">
            <summary>
            判断是否为空
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.GuidToString(System.Guid)">
            <summary>
            GUID转成字符串
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.StringToGuid(System.String)">
            <summary>
            字符串转回GUID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.DataSetToXML(System.Data.DataSet,System.Data.XmlWriteMode)">
            <summary>
            把DataSet打成XML字符串
            </summary>
            <param name="ds">要处理的DataSet</param>
            <param name="mode">指定如何从 System.Data.DataSet 写入 XML 数据和关系架构</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.DataSetToXML(System.Data.DataSet)">
            <summary>
            把DataSet打成XML字符串
            </summary>
            <param name="ds">要处理的DataSet</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.XMLToDataSet(System.String,System.Data.XmlReadMode)">
            <summary>
            XML字符串转成DataSet
            </summary>
            <param name="xml">xml字符串</param>
            <param name="mode">指定如何将 XML 数据和关系架构读入 System.Data.DataSet</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.XMLToDataSet(System.String)">
            <summary>
            XML字符串转成DataSet
            </summary>
            <param name="xml">xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.RawDeserialize(System.Byte[],System.Type)">
            <summary>
            反序列化结构体
            </summary>
            <param name="rawdatas"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.RawDeserialize``1(System.Byte[])">
            <summary>
            反序列化结构体
            </summary>
            <param name="rawdatas"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.RawDeserialize(System.IO.Stream,System.Type)">
            <summary>
            从流中读出元素
            </summary>
            <param name="stm"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.RawDeserialize``1(System.IO.Stream)">
            <summary>
            从流中读出元素
            </summary>
            <param name="stm">流</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.RawSerialize(System.Object)">
            <summary>
            对象序列化成字节数组
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.GetLocalIP">
            <summary>
            获取本机IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.EntityProChangeType(System.Object,System.Type)">
            <summary>
            实体类型转换
            </summary>
            <param name="sValue">源值</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.ReplaceString(System.String,System.Collections.Generic.IEnumerable{Commons.Replacer.ReplaceItem})">
            <summary>
            按照条件替换字符串
            </summary>
            <param name="source">源字符串</param>
            <param name="conditions">替换条件集合</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.LoadStreamData(System.IO.Stream)">
            <summary>
            读取流的内容
            </summary>
            <param name="stm">流</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.LoadStreamData2(System.IO.Stream)">
            <summary>
            读取流的内容
            </summary>
            <param name="stm">流</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.CopyStreamData(System.IO.Stream,System.IO.Stream)">
            <summary>
            流内容复制
            </summary>
            <param name="stmSource">源</param>
            <param name="stmTarget">目标</param>
        </member>
        <member name="M:Commons.CommonMethods.GetAllNumber(System.String)">
            <summary>
            获取字符串里边的所有数字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.IsStringEmpty(System.String)">
            <summary>
            判断字符串是否为空
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.BytesToHexString(System.Byte[])">
            <summary>
            把字节数组转成十六进制字符串
            </summary>
            <param name="bye">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.ByteToHexString(System.Byte)">
            <summary>
            把字节转成十六进制字符串
            </summary>
            <param name="bye">字节</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.ToByteString(System.String)">
            <summary>
            把文字转成十六进制字符码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.HexStringToBytes(System.String)">
            <summary>
            把十六进制字符串转成字节数组
            </summary>
            <param name="str">十六进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.FormatString(System.Object)">
            <summary>
            格式化字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.FormatLongString(System.Object,System.Int32)">
            <summary>
            格式化字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.GetCode(System.Int32)">
            <summary>
             随机生成字符串
            </summary>
            <param name="length">生成多少位随机字符串</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.FormatDateTimeString(System.DateTime)">
            <summary>
            格式化输出的日期
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.IsIntNumber(System.String)">
            <summary>
            判断该字符串是否整型数字
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.ListToDictionary``2(System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            把集合转换成字典类
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型 </typeparam>
            <param name="collection">集合类</param>
            <param name="keyProperty">键名</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.IsNumber(System.String)">
            <summary>
            判断该字符串是否整型数字
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.GetFileName(System.String,System.String,System.String)">
            <summary>
            创建文件名
            </summary>
            <param name="path">路径</param>
            <param name="fileNamepart">文件名</param>
            <param name="extendName">扩展名</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.CurrentDataString">
            <summary>
            按时间生成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.StringToKey(System.String,System.Byte)">
            <summary>
            把字符串变成字节数组，然后数组每个元素减去指定的值
            </summary>
            <param name="str">字符串</param>
            <param name="bye">要减去的值</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.KeyToString(System.String,System.Byte)">
            <summary>
            把字节数组变回字符串，数组每个元素加上指定的值
            </summary>
            <param name="str">字符串</param>
            <param name="bye">要加上的值</param>
            <returns></returns>
        </member>
        <member name="M:Commons.CommonMethods.GetFilePath(System.String)">
            <summary>
            获取文件路径所在的文件夹
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="P:Commons.CommonMethods.IsWebContext">
            <summary>
            检测是否Web程序
            </summary>
        </member>
        <member name="T:Commons.CommonMethods.Regulars">
            <summary>
            常用的正则表达式
            </summary>
        </member>
        <member name="F:Commons.CommonMethods.Regulars.PhoneRegular">
            <summary>
            固定电话
            </summary>
        </member>
        <member name="F:Commons.CommonMethods.Regulars.AllPhoneRegular">
            <summary>
            所有电话
            </summary>
        </member>
        <member name="F:Commons.CommonMethods.Regulars.Mobile">
            <summary>
            移动电话
            </summary>
        </member>
        <member name="T:Commons.FastReflection.AssemblyTypeLoader">
            <summary>
            程序集的类型加载器
            </summary>
        </member>
        <member name="M:Commons.FastReflection.AssemblyTypeLoader.#ctor(System.String[])">
            <summary>
            程序集的类型加载器
            </summary>
            <param name="assNames">指定的程序集</param>
        </member>
        <member name="M:Commons.FastReflection.AssemblyTypeLoader.GetBaseRoot">
            <summary>
            基目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.AssemblyTypeLoader.LoadAllAssembly(System.String[])">
            <summary>
            获取本项目所有程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.AssemblyTypeLoader.LoadType(System.String)">
            <summary>
            加载类型
            </summary>
            <param name="typeName">类型名</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.AssemblyTypeLoader.LoadType(System.String,System.String)">
            <summary>
            加载类型
            </summary>
            <param name="typeName">类型名称</param>
            <param name="assemblyName">程序集名</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.AssemblyTypeLoader.GetTypes">
            <summary>
            获取加载的程序集中所有的类型
            </summary>
            <returns></returns>
        </member>
        <member name="T:Commons.PostForms.FormFile">
            <summary>
            发送请求的文件类
            </summary>
        </member>
        <member name="P:Commons.PostForms.FormFile.Data">
            <summary>
            上传文件的数据
            </summary>
        </member>
        <member name="P:Commons.PostForms.FormFile.FileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:Commons.PostForms.FormFile.FormName">
            <summary>
            表单字段名称
            </summary>
        </member>
        <member name="P:Commons.PostForms.FormFile.ContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="T:Commons.Lock">
            <summary>
            会自动释放的锁，可设置等待超时
            </summary>
        </member>
        <member name="F:Commons.Lock.defaultMillisecondsTimeout">
            <summary>
            默认超时设置
            </summary>
        </member>
        <member name="M:Commons.Lock.#ctor(System.Object)">
            <summary>
            构造 
            </summary>
            <param name="obj">想要锁住的对象</param>
        </member>
        <member name="M:Commons.Lock.#ctor(System.Object,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="obj">想要锁住的对象</param>
            <param name="millisecondsTimeout">超时设置</param>
        </member>
        <member name="M:Commons.Lock.#ctor(System.Object,System.Int32,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="obj">想要锁住的对象</param>
            <param name="millisecondsTimeout">超时设置</param>
            <param name="throwTimeoutException">是否抛出超时异常</param>
        </member>
        <member name="M:Commons.Lock.Dispose">
            <summary>
            销毁，并释放锁
            </summary>
        </member>
        <member name="P:Commons.Lock.IsTimeout">
            <summary>
            获取在获取锁时是否发生等待超时
            </summary>
        </member>
        <member name="T:Commons.FastReflection.ClassInfos.ProxyAssembly">
            <summary>
            远程程序集
            </summary>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ProxyAssembly.#ctor(System.String)">
            <summary>
            加载文件
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ProxyAssembly.#ctor(System.Byte[])">
            <summary>
            加载文件内容
            </summary>
            <param name="fileContent"></param>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ProxyAssembly.GetObjectInstance(System.String,System.Object[])">
            <summary>
            获取类型的实体
            </summary>
            <param name="typeName">类型名</param>
            <returns></returns>
        </member>
        <member name="P:Commons.FastReflection.ClassInfos.ProxyAssembly.Assembly">
            <summary>
            关联的程序集信息
            </summary>
        </member>
        <member name="T:Commons.MassManager">
            <summary>
            常量管理器
            </summary>
        </member>
        <member name="M:Commons.MassManager.GetMassInfos(System.Type)">
            <summary>
            根据类型获取常量集合
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.MassManager.GetInfoByName(System.Type,System.String)">
            <summary>
            通过字段名获取其常量信息
            </summary>
            <param name="objType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.MassManager.GetInfoByValue(System.Type,System.Object)">
            <summary>
            通过值获取其常量信息
            </summary>
            <param name="objType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.MassManager.GetInfos(System.Type)">
            <summary>
            获取此类的常量信息
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="T:Commons.FastReflection.ClassInfos.ClassInfoHandle">
            <summary>
            类的信息
            </summary>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ClassInfoHandle.#ctor(System.Type,Commons.FastReflection.FastInvoke.CreateInstanceHandler,System.Collections.Generic.Dictionary{System.String,Commons.FastReflection.PropertyInfoHandle})">
            <summary>
            类的信息
            </summary>
            <param name="classType">类类型</param>
            <param name="createInstanceHandler">实例化类的句柄</param>
            <param name="propertyInfoHandles">属性集合</param>
            <param name="tableName">对应的表名</param>
        </member>
        <member name="M:Commons.FastReflection.ClassInfos.ClassInfoHandle.CreateInstance">
            <summary>
            返回此类型的实例
            </summary>
            <returns></returns>
        </member>
        <member name="P:Commons.FastReflection.ClassInfos.ClassInfoHandle.ClassType">
            <summary>
            本类的类型
            </summary>
        </member>
        <member name="P:Commons.FastReflection.ClassInfos.ClassInfoHandle.PropertyInfo">
            <summary>
            获取属性的信息
            </summary>
        </member>
        <member name="M:Commons.EnumUnit.GetEnumInfos(System.Type)">
            <summary>
            获取本枚举里边所有属性的信息
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Commons.EnumUnit.GetEnumDescription(System.Enum)">
            <summary>
            获取枚举值的注释
            </summary>
            <param name="objEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.EnumUnit.GetEnumInfo(System.Enum)">
            <summary>
            获取枚举值的信息
            </summary>
            <param name="objEnum">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:Commons.EnumUnit.GetEnumInfoByName(System.Type,System.String)">
            <summary>
            根据枚举的属性名来获取其信息
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="name">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FastValueGetSet.GetPropertyInfoHandle(System.String,System.Type)">
            <summary>
            获取属性的信息
            </summary>
            <param name="proName">属性名</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FastValueGetSet.GetPropertyInfoHandleWithOutCache(System.String,System.Type)">
            <summary>
            获取属性的信息(不使用缓存)
            </summary>
            <param name="proName">属性名</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FastValueGetSet.GetGetMethodInfo(System.String,System.Type)">
            <summary>
            获取获取值的方法接口
            </summary>
            <param name="proName">属性名</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FastValueGetSet.GetSetMethodInfo(System.String,System.Type)">
            <summary>
            获取设置值的方法接口
            </summary>
            <param name="proName">属性名</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FastValueGetSet.GetCustomerMethodInfo(System.Type,System.String,System.Type[])">
            <summary>
            获取该类型的指定方法的委托
            </summary>
            <param name="objectType">所属类的类型</param>
            <param name="methodName">方法名</param>
            <param name="parametersType">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FastValueGetSet.GetCustomerMethodInfo(System.Reflection.MethodInfo)">
            <summary>
            获取该类型的指定方法的委托
            </summary>
            <param name="methodInfo">函数信息</param>
            <param name="parametersType">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FastValueGetSet.SetValue(System.Object,System.Object,System.String,System.Type)">
            <summary>
            对对象赋值
            </summary>
            <param name="args">对象</param>
            <param name="value">值</param>
            <param name="propertyName">属性名</param>
            <param name="objType">对象类型</param>
        </member>
        <member name="M:Commons.FastReflection.FastValueGetSet.GetValue(System.Object,System.String,System.Type)">
            <summary>
            获取对象赋值
            </summary>
            <param name="args">对象</param>
            <param name="value">值</param>
            <param name="propertyName">属性名</param>
            <param name="objType">对象类型</param>
        </member>
        <member name="M:Commons.FastReflection.FastValueGetSet.CreateObject(System.Type)">
            <summary>
            生成实体类
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Commons.FastReflection.FastValueGetSet.GetCreateInstanceHandler(System.Type)">
            <summary>
            根据类型查找指定的创建对象的代理
            </summary>
            <param name="type">类型</param> 
            <returns></returns> 
        </member>
        <member name="M:Commons.FastReflection.FastValueGetSet.GetCreateInstanceHandlerWithOutCache(System.Type)">
            <summary>
            根据类型查找指定的创建对象的代理
            </summary>
            <param name="type">类型</param> 
            <returns></returns> 
        </member>
        <member name="M:Commons.NetClients.NetListener.#ctor(System.Int32,System.ComponentModel.ISynchronizeInvoke)">
            <summary>
            网络监听器
            </summary>
            <param name="port">监听端口</param>
            <param name="synInvoker">需要线程同步的宿主(如：当前窗体)</param>
        </member>
        <member name="M:Commons.NetClients.NetListener.#ctor(System.Int32)">
            <summary>
            网络监听器
            </summary>
            <param name="port">监听端口</param>
        </member>
        <member name="M:Commons.NetClients.NetListener.#ctor">
            <summary>
             网络监听器
            </summary>
            <param name="port">监听端口</param>
        </member>
        <member name="M:Commons.NetClients.NetListener.#ctor(System.String,System.Int32,System.ComponentModel.ISynchronizeInvoke)">
            <summary>
             网络监听器
            </summary>
            <param name="ipAddress">IP地址</param>
            <param name="port">监听端口</param>
            <param name="synInvoker">需要线程同步的宿主(如：当前窗体)</param>
        </member>
        <member name="M:Commons.NetClients.NetListener.StarListen">
            <summary>
            开始监听
            </summary>
        </member>
        <member name="M:Commons.NetClients.NetListener.StopListener">
            <summary>
            关闭监听
            </summary>
        </member>
        <member name="M:Commons.NetClients.NetListener.MainListener">
            <summary>
            主监听线程
            </summary>
        </member>
        <member name="M:Commons.NetClients.NetListener.DoAccept(System.Object)">
            <summary>
            当有信息进入时候
            </summary>
        </member>
    </members>
</doc>
